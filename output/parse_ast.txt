(class
  (const nil :PasswordPolicyValidator)
  (const
    (const nil :ActiveModel) :EachValidator)
  (begin
    (casgn nil :PASSWORD_FORMAT
      (send
        (regexp
          (str "\\A(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*?[[:^alnum:]]).{10,100}\\z")
          (regopt)) :freeze))
    (def :validate_each
      (args
        (arg :record)
        (arg :_attribute)
        (arg :value))
      (begin
        (ivasgn :@user
          (lvar :record))
        (ivasgn :@new_password
          (lvar :value))
        (if
          (send
            (send
              (send
                (ivar :@user) :errors) :[]
              (sym :password)) :any?)
          (return) nil)
        (if
          (send
            (ivar :@new_password) :nil?)
          (return) nil)
        (send nil :should_comply_with_pwd_format)
        (if
          (send
            (ivar :@user) :persisted?)
          (send nil :should_not_be_previous_pwd) nil)
        (send nil :should_not_be_login)
        (send nil :should_not_be_inverted_login)
        (send nil :should_not_contain_common_word)))
    (send nil :private)
    (def :add_error_msg
      (args
        (arg :i18n_last_key))
      (send
        (send
          (send
            (ivar :@user) :errors) :[]
          (sym :password)) :<<
        (send
          (const nil :I18n) :t
          (dstr
            (str ".activerecord.errors.models.user.attributes.password.")
            (begin
              (lvar :i18n_last_key))))))
    (def :should_comply_with_pwd_format
      (args)
      (begin
        (if
          (send
            (const nil :PASSWORD_FORMAT) :match?
            (ivar :@new_password))
          (return) nil)
        (send nil :add_error_msg
          (sym :format))))
    (def :should_not_be_previous_pwd
      (args)
      (begin
        (lvasgn :previous_pwd_enc
          (send
            (send
              (const nil :User) :find
              (send
                (ivar :@user) :id)) :encrypted_password))
        (lvasgn :bcrypt
          (send
            (const
              (const
                (cbase) :BCrypt) :Password) :new
            (lvar :previous_pwd_enc)))
        (lvasgn :current_pwd_enc
          (send
            (const
              (const
                (cbase) :BCrypt) :Engine) :hash_secret
            (send
              (array
                (ivar :@new_password)
                (send
                  (const nil :Devise) :pepper)) :join)
            (send
              (lvar :bcrypt) :salt)))
        (if
          (send
            (lvar :current_pwd_enc) :==
            (lvar :previous_pwd_enc)) nil
          (return))
        (send nil :add_error_msg
          (sym :previous_pwd))))
    (def :should_not_be_login
      (args)
      (begin
        (if
          (send
            (send
              (ivar :@new_password) :casecmp
              (send
                (ivar :@user) :email)) :zero?) nil
          (return))
        (send nil :add_error_msg
          (sym :not_login))))
    (def :should_not_be_inverted_login
      (args)
      (begin
        (if
          (send
            (send
              (ivar :@new_password) :casecmp
              (send
                (send
                  (ivar :@user) :email) :reverse)) :zero?) nil
          (return))
        (send nil :add_error_msg
          (sym :not_reversed_login))))
    (def :should_not_contain_common_word
      (args)
      (begin
        (lvasgn :normalized_pwd
          (send
            (ivar :@new_password) :downcase))
        (if
          (block
            (send
              (const nil :COMMON_PASSWORDS) :detect)
            (args
              (arg :pwd))
            (send
              (lvar :normalized_pwd) :==
              (lvar :pwd))) nil
          (return))
        (send nil :add_error_msg
          (sym :dictionary))))))